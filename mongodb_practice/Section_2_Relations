OneToOne Relation
=================

{
        "_id" : ObjectId("5dbd47e5aca2de4b84273ba8"),
        "name" : "max",
        "age" : 29,
        "summary" : "summary-max-1"
}

db.summary.find()
{ "_id" : "summary-max-1", "diseases" : [ "cold", "leg problem" ] }

var dsid=db.patients.findOne().summary
db.summary.findOne({_id:dsid})

Always prefer embedded document like below for strong OneToOne Relation

{
        "_id" : ObjectId("5dbd4a23aca2de4b84273ba9"),
        "name" : "max",
        "age" : 29,
        "diseases" : [
                "cold",
                "leg"
        ]
}

Excersize  : A Blog
---------

User ----> App server

User should be able to
  - Create Post
  - Edit Post
  - Delete Post
  - Fetch Posts
  - Fetch Post
  - Comment


User      Post      Comment

_id       _id        _id
name      title      text
age       text
email     tags

User -------> Post
    \        /
      Comment

Approach-1:
  We can  have only Post collections
  with User & Comment as embedded documents

  but User data has to be duplicated

Approach-2:

Optimal Solution be would have
    User & Post collection


db.users.insertMany([{name:"max",age:29,email:"nav@gmail.com"},{name:"divi",age:20,email:"divi@gmail.com"}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("5dbd5995aca2de4b84273baa"),
                ObjectId("5dbd5995aca2de4b84273bab")
        ]
}

db.posts.insertOne({title:"my first post",text:"this is my first post hope you liek it",tags:["good","best"],creator:ObjectId("5dbd5995aca2de4b84273baa"),comments:[{text:"I like it",author:ObjectId("5dbd5995aca2de4b84273bab")}]})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("5dbd5a31aca2de4b84273bac")
}

> db.posts.find().pretty()
{
        "_id" : ObjectId("5dbd5a31aca2de4b84273bac"),
        "title" : "my first post",
        "text" : "this is my first post hope you liek it",
        "tags" : [
                "good",
                "best"
        ],
        "creator" : ObjectId("5dbd5995aca2de4b84273baa"),
        "comments" : [
                {
                        "text" : "I like it",
                        "author" : ObjectId("5dbd5995aca2de4b84273bab")
                }
        ]
}


Schema Validation
===============

db.createCollection('posts', {
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      required: ['title', 'text', 'creator', 'comments'],
      properties: {
        title: {
          bsonType: 'string',
          description: 'must be a string and is required'
        },
        text: {
          bsonType: 'string',
          description: 'must be a string and is required'
        },
        creator: {
          bsonType: 'objectId',
          description: 'must be an objectid and is required'
        },
        comments: {
          bsonType: 'array',
          description: 'must be an array and is required',
          items: {
            bsonType: 'object',
            required: ['text', 'author'],
            properties: {
              text: {
                bsonType: 'string',
                description: 'must be a string and is required'
              },
              author: {
                bsonType: 'objectId',
                description: 'must be an objectid and is required'
              }
            }
          }
        }
      }
    }
  }
});
