db.collection.find(  {age:  32}         )

db.collection.find(  {age:  { $gt:30} } )   #using operator



Query & Projection (Read Related Operators)
------------------
Query Selectors
Projection Operators


Update Operators
----------------
Fields
Arrays

Aggregation
-----------

How Operators Impact our data:

Query Operator  --> LocateData -->  $eq (e.g)  --> NoDatachange
Projection Operator --> Modify Presentation --> $(e.g) --> NoDatachange
Update Operator  --> Modify + add data ---> $inc (e.g) --> Datachange



QuerySelectors
===============
Comparison
Evaluation
Logical
Array
Element
Comments
Geospatial

Projection Operator
===================
$
$eleMatch
$meta
$slice


===================================

{
        "_id" : ObjectId("5dbd936daa87a75469e9f0cb"),
        "id" : 4,
        "url" : "http://www.tvmaze.com/shows/4/arrow",
        "name" : "Arrow",
        "type" : "Scripted",
        "language" : "English",
        "genres" : [
                "Drama",
                "Action",
                "Science-Fiction"
        ],
        "status" : "Running",
        "runtime" : 60,
        "premiered" : "2012-10-10",
        "officialSite" : "http://www.cwtv.com/shows/arrow",
        "schedule" : {
                "time" : "20:00",
                "days" : [
                        "Monday"
                ]
        },
        "rating" : {
                "average" : 7.6
        },
        "weight" : 99,
        "network" : {
                "id" : 5,
                "name" : "The CW",
                "country" : {
                        "name" : "United States",
                        "code" : "US",
                        "timezone" : "America/New_York"
                }
        },
        "webChannel" : null,
        "externals" : {
                "tvrage" : 30715,
                "thetvdb" : 257655,
                "imdb" : "tt2193021"
        },
        "image" : {
                "medium" : "http://static.tvmaze.com/uploads/images/medium_portrait/165/414895.jpg",
                "original" : "http://static.tvmaze.com/uploads/images/original_untouched/165/414895.jpg"
        },
        "summary" : "<p>After a violent shipwreck, billionaire playboy Oliver Queen was missing and presumed dead for five years before being discovered alive on a remote island in the Pacific. He returned home to Starling City, welcomed by his devoted mother Moira, beloved sister Thea and former flame Laurel Lance. With the aid of his trusted chauffeur/bodyguard John Diggle, the computer-hacking skills of Felicity Smoak and the occasional, reluctant assistance of former police detective, now beat cop, Quentin Lance, Oliver has been waging a one-man war on crime.</p>",
        "updated" : 1536062117,
        "_links" : {
                "self" : {
                        "href" : "http://api.tvmaze.com/shows/4"
                },
                "previousepisode" : {
                        "href" : "http://api.tvmaze.com/episodes/1426875"
                },
                "nextepisode" : {
                        "href" : "http://api.tvmaze.com/episodes/1473817"
                }
        }
}

Comparison Operators
=====================

1.Querying embedded document:
    (e.g)  "rating" : {
                "average" : 7.6
        },
    db.movies.find({ "rating.average":{    $gt:7} }).pretty()


2.Querying Arrays:
   (e.g)   "genres" : [
                "Drama",
                "Action",
                "Science-Fiction"
        ]

db.movies.find({  genres: "Drama"}).pretty()  ---> This will data if the genres contains "Drama" along with anyother genres

db.movies.find({  genres: ["Drama"]}).pretty()  ---> This will return data if only "Drama" is there in genres

3.$in & $nin:
  db.movies.find({ runtime : { $in: [30,42 ] }})   --> returns if runtime is either 30 or 42
  db.movies.find({ runtime : { $nin: [30,42 ] }})   ---> runtime! = 30 or 42


Logical Operators
===================

1.$or and $nor :
    1. $or --> db.movies.find({$or: [{"rating.average":{$lt:5}},{"rating.average":{$gt:9.3}} ]}).pretty()  #rating > 5 and rating < 9.3
    2.$nor --->  db.movies.find({$nor: [{"rating.average":{$lt:5}},{"rating.average":{$gt:9.3}} ]}).pretty() #all document where rating is not > 5 and rating is not < 9.3

2. $and:
   1. db.movies.find({$and: [{"rating.average":{$gt:5}},{genres:"Drama"} ]}).pretty()

3. $not:
   db.movies.find({runtime:{ $not : {$eq:60}}}).count()

   usually it can be replace with $ne
   db.movies.find({runtime:{$ne:60}}).count()


Element Operators
=================

1.$exisits:
   db.user.insertMany([{name:'navi',age:20},{name:'divi'}])

   db.user.find({age:{$exists:true}})
{ "_id" : ObjectId("5dbdc652aca2de4b84273bb4"), "name" : "navi", "age" : 20 }

 db.user.find({age:{$exists:true,$gte:20}})
{ "_id" : ObjectId("5dbdc652aca2de4b84273bb4"), "name" : "navi", "age" : 20 }

 db.user.find({age:{$exists:true}}) ---> returns even if age is null
 db.user.find({age:{$exists:true,$ne:null}}) --> return if age is not null


2.$type

db.user.find({age:{$type:"number"}})
{ "_id" : ObjectId("5dbdc652aca2de4b84273bb4"), "name" : "navi", "age" : 20 }

db.user.find({age:{$type:"number"}})
{ "_id" : ObjectId("5dbdc652aca2de4b84273bb4"), "name" : "navi", "age" : 20 }


Evaluation Operators
===================

1.$regex:
   db.movies.find({ summary:{$regex:/music/ }  }).pretty()
2.$expr:
    {
    "_id":"id1",
    "volume":120,
     "target":177
    }
db.sales.find({
            $expr:{
                    $gt:[ $cond:
                            { if: {$gte: ["$volume",190]},
                                then: { $subtract:["$volume",10]},
                                else: "$volume"}},
                           "$target"]
                                }
                            }
                        )

Querying Arrays
================


db.boxoffice.find({genre:{$all:["action","thriller"]}}).pretty()   #retrieve the data even if the order of genre is different


Projection
===========

get only the data wat we want

db.movies.find({},{name:1,genres:1,runtime:1,rating:1,"schedule.time":1}).pretty()

{
        "_id" : ObjectId("5dbd936daa87a75469e9f0ca"),
        "name" : "Person of Interest",
        "genres" : [
                "Drama",
                "Action",
                "Crime"
        ],
        "runtime" : 60,
        "schedule" : {
                "time" : "22:00"
        },
        "rating" : {
                "average" : 9
        }
}


> db.movies.find({genres:"Drama"},{"genres.$":2})
{ "_id" : ObjectId("5dbd936daa87a75469e9f0cb"), "genres" : [ "Drama" ] }
{ "_id" : ObjectId("5dbd936daa87a75469e9f0cd"), "genres" : [ "Drama" ] }
Type "it" for more


db.movies.find({genres:"Drama"},{genres:{$elemMatch:{$eq:"Horror"}}})
{ "_id" : ObjectId("5dbd936daa87a75469e9f0be") }
{ "_id" : ObjectId("5dbd936daa87a75469e9f0bf"), "genres" : [ "Horror" ] }
{ "_id" : ObjectId("5dbd936daa87a75469e9f0c0") }
{ "_id" : ObjectId("5dbd936daa87a75469e9f0c1") }
{ "_id" : ObjectId("5dbd936daa87a75469e9f0c2"), "genres" : [ "Horror" ] }



$slice
 db.movies.find({ "rating.average":{$gt:6}}, {genres:{$slice:[1,3]}, name:1})

















